I want a region editor component that lets me do:
Click adds region component
Drag point moves region point
Click on initial point completes region
External command clears region or part of a region
External command loads a region or part of a region


(0, 0) ---------------------------------- (500, 0)






(0, 500) ------------------------------- (500, 500)


The server should:
Serve the ELM application
Have a database containing information about the image files
Have a resource letting you list the image files and update their informations


Move the images to the server static directory.
Re-import them from there.
The annotator directory lives on but there is the ./build script that builds all its relevant stuff into server/static/html.



The regions should have their own table in the database.
Labels should have their own table in the database.
If a region has any labels, then deleting it should merely mark it as deleted so that the labels are still interpretable.
If a region has any labels, then modifying it should not be allowed.
At some point there might need to be a time column in the direction database for when the camera shifts.



The region labler should carry labels over from the previous frame so that I can click through them fast and only make changes when things change.
Clicking should toggle between occupied/unoccupied (instead of having an unlabled option) so that I need to do fewer clicks.


---------------

There shall be a page that I can go to where I can select a feed that I want to start importing and it will start importing images from that feed in to the database.
It'll also show the images from the feed as it is importing them.
In the future I can also make this page show inferred labels and stuff on top of the images.

There shall also be an improved frame navigation widget so that I can quickly select newer frames in the region editor and labeler pages and label them.

-------------

Make the decision tree more structured, add more features (like time-of-day or light-level or something similar).
Make the decision tree serializable.
Store the decision tree in the database.

Make a thing that runs the decision tree as the frames come in and displays the results.

There should be a thing that will load the image for a frame.
It can power the example loader and the decision tree loader.
